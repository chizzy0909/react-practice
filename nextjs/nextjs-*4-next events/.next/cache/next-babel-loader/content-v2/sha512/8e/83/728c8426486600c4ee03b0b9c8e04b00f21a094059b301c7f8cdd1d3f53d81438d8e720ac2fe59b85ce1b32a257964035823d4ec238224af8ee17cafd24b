{"ast":null,"code":"import { connectDatabase, insertDocument, getAllDocuments } from \"../../../helpers/db-util\";\n\nasync function handler(req, res) {\n  const eventId = req.query.eventId;\n  let client; // try {\n  //   client = await connectDatabase();\n  // } catch (error) {\n  //   res.status(500).json({ message: \"Connecting to the database failed!\" });\n  //   return;\n  // }\n\n  if (req.method === \"POST\") {\n    const {\n      email,\n      name,\n      text\n    } = req.body;\n\n    if (!email.includes(\"@\") || !name || name.trim() === \"\" || !text || text.trim() === \"\") {\n      res.status(422).json({\n        message: \"Invalid input.\"\n      }); // client.close();\n\n      return;\n    }\n\n    const newComment = {\n      email,\n      name,\n      text,\n      eventId\n    }; // console.log(newComment);\n\n    res.status(201).json({\n      message: \"Added Message.\",\n      comment: newComment\n    }); //   let result;\n    //   try {\n    //     result = await insertDocument(client, \"comments\", newComment);\n    //     newComment._id = result.insertedId;\n    //     res.status(201).json({ message: \"Added comment.\", comment: newComment });\n    //   } catch (error) {\n    //     res.status(500).json({ message: \"Inserting comment failed!\" });\n    //   }\n  }\n\n  if (req.method === \"GET\") {\n    const dummyList = [{\n      id: \"c1\",\n      name: \"Max\",\n      text: \"A first comment\"\n    }, {\n      id: \"c2\",\n      name: \"Manuel\",\n      text: \"A Second comment\"\n    }];\n    res.status(200).json({\n      comments: dummyList\n    }); // try {\n    //   const documents = await getAllDocuments(client, \"comments\", { _id: -1 });\n    //   res.status(200).json({ comments: documents });\n    // } catch (error) {\n    //   res.status(500).json({ message: \"Getting comments failed.\" });\n    // }\n  } // client.close();\n\n}\n\nexport default handler;","map":{"version":3,"sources":["/Users/chenghongzhen/react-practice/nextjs/nextjs-*4-work with firebase/pages/api/comments/[eventId].js"],"names":["connectDatabase","insertDocument","getAllDocuments","handler","req","res","eventId","query","client","method","email","name","text","body","includes","trim","status","json","message","newComment","comment","dummyList","id","comments"],"mappings":"AAAA,SACEA,eADF,EAEEC,cAFF,EAGEC,eAHF,QAIO,0BAJP;;AAMA,eAAeC,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AAC/B,QAAMC,OAAO,GAAGF,GAAG,CAACG,KAAJ,CAAUD,OAA1B;AAEA,MAAIE,MAAJ,CAH+B,CAK/B;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAIJ,GAAG,CAACK,MAAJ,KAAe,MAAnB,EAA2B;AACzB,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA,IAAT;AAAeC,MAAAA;AAAf,QAAwBR,GAAG,CAACS,IAAlC;;AAEA,QACE,CAACH,KAAK,CAACI,QAAN,CAAe,GAAf,CAAD,IACA,CAACH,IADD,IAEAA,IAAI,CAACI,IAAL,OAAgB,EAFhB,IAGA,CAACH,IAHD,IAIAA,IAAI,CAACG,IAAL,OAAgB,EALlB,EAME;AACAV,MAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAArB,EADA,CAEA;;AACA;AACD;;AAED,UAAMC,UAAU,GAAG;AACjBT,MAAAA,KADiB;AAEjBC,MAAAA,IAFiB;AAGjBC,MAAAA,IAHiB;AAIjBN,MAAAA;AAJiB,KAAnB,CAfyB,CAqBzB;;AACAD,IAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,OAAO,EAAE,gBAAX;AAA6BE,MAAAA,OAAO,EAAED;AAAtC,KAArB,EAtByB,CAwBzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AAED,MAAIf,GAAG,CAACK,MAAJ,KAAe,KAAnB,EAA0B;AACxB,UAAMY,SAAS,GAAG,CAChB;AAAEC,MAAAA,EAAE,EAAE,IAAN;AAAYX,MAAAA,IAAI,EAAE,KAAlB;AAAyBC,MAAAA,IAAI,EAAE;AAA/B,KADgB,EAEhB;AAAEU,MAAAA,EAAE,EAAE,IAAN;AAAYX,MAAAA,IAAI,EAAE,QAAlB;AAA4BC,MAAAA,IAAI,EAAE;AAAlC,KAFgB,CAAlB;AAIAP,IAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEM,MAAAA,QAAQ,EAAEF;AAAZ,KAArB,EALwB,CAOxB;AACA;AACA;AACA;AACA;AACA;AACD,GA5D8B,CA8D/B;;AACD;;AAED,eAAelB,OAAf","sourcesContent":["import {\n  connectDatabase,\n  insertDocument,\n  getAllDocuments,\n} from \"../../../helpers/db-util\";\n\nasync function handler(req, res) {\n  const eventId = req.query.eventId;\n\n  let client;\n\n  // try {\n  //   client = await connectDatabase();\n  // } catch (error) {\n  //   res.status(500).json({ message: \"Connecting to the database failed!\" });\n  //   return;\n  // }\n\n  if (req.method === \"POST\") {\n    const { email, name, text } = req.body;\n\n    if (\n      !email.includes(\"@\") ||\n      !name ||\n      name.trim() === \"\" ||\n      !text ||\n      text.trim() === \"\"\n    ) {\n      res.status(422).json({ message: \"Invalid input.\" });\n      // client.close();\n      return;\n    }\n\n    const newComment = {\n      email,\n      name,\n      text,\n      eventId,\n    };\n    // console.log(newComment);\n    res.status(201).json({ message: \"Added Message.\", comment: newComment });\n\n    //   let result;\n\n    //   try {\n    //     result = await insertDocument(client, \"comments\", newComment);\n    //     newComment._id = result.insertedId;\n    //     res.status(201).json({ message: \"Added comment.\", comment: newComment });\n    //   } catch (error) {\n    //     res.status(500).json({ message: \"Inserting comment failed!\" });\n    //   }\n  }\n\n  if (req.method === \"GET\") {\n    const dummyList = [\n      { id: \"c1\", name: \"Max\", text: \"A first comment\" },\n      { id: \"c2\", name: \"Manuel\", text: \"A Second comment\" },\n    ];\n    res.status(200).json({ comments: dummyList });\n\n    // try {\n    //   const documents = await getAllDocuments(client, \"comments\", { _id: -1 });\n    //   res.status(200).json({ comments: documents });\n    // } catch (error) {\n    //   res.status(500).json({ message: \"Getting comments failed.\" });\n    // }\n  }\n\n  // client.close();\n}\n\nexport default handler;\n"]},"metadata":{},"sourceType":"module"}